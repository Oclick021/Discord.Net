// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PubgStatsDiscordBot.Helpers;

namespace PubgStatsDiscordBot.Migrations
{
    [DbContext(typeof(PubgDbContext))]
    [Migration("20190828175545_match")]
    partial class match
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PubgStatsDiscordBot.Models.Match", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Duration");

                    b.Property<string>("GameMode");

                    b.Property<bool>("IsCustomMatch");

                    b.Property<string>("MapName");

                    b.Property<string>("PlayerId");

                    b.Property<string>("SeasonState");

                    b.Property<string>("ShardId");

                    b.Property<string>("TitleId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("PubgStatsDiscordBot.Models.Participant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Actor");

                    b.Property<string>("RosterId");

                    b.Property<string>("ShardId");

                    b.Property<string>("StatsID");

                    b.HasKey("Id");

                    b.HasIndex("RosterId");

                    b.HasIndex("StatsID");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("PubgStatsDiscordBot.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CurrentSeasionLastUpdate");

                    b.Property<string>("DuoStatsID");

                    b.Property<string>("Name");

                    b.Property<string>("SoloStatsID");

                    b.Property<string>("SquadStatsID");

                    b.HasKey("Id");

                    b.HasIndex("DuoStatsID");

                    b.HasIndex("SoloStatsID");

                    b.HasIndex("SquadStatsID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("PubgStatsDiscordBot.Models.Roster", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MatchId");

                    b.Property<string>("ShardId");

                    b.Property<bool>("Won");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Rosters");
                });

            modelBuilder.Entity("PubgStatsDiscordBot.Models.Stats", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Assists");

                    b.Property<float>("BestRankPoint");

                    b.Property<int>("DailyKills");

                    b.Property<int>("DailyWins");

                    b.Property<float>("DamageDealt");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("HeadshotKills");

                    b.Property<int>("Kills");

                    b.Property<float>("LongestKill");

                    b.Property<int>("Losses");

                    b.Property<int>("MaxKillStreaks");

                    b.Property<float>("RankPoints");

                    b.Property<int>("RoundsPlayed");

                    b.Property<int>("Top10s");

                    b.Property<int>("WeeklyKills");

                    b.Property<int>("WeeklyWins");

                    b.Property<int>("Wins");

                    b.HasKey("ID");

                    b.ToTable("SeasonStats");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Stats");
                });

            modelBuilder.Entity("PubgStatsDiscordBot.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscordName");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PubgStatsDiscordBot.Models.ParticipantsStats", b =>
                {
                    b.HasBaseType("PubgStatsDiscordBot.Models.Stats");

                    b.HasDiscriminator().HasValue("ParticipantsStats");
                });

            modelBuilder.Entity("PubgStatsDiscordBot.Models.Match", b =>
                {
                    b.HasOne("PubgStatsDiscordBot.Models.Player")
                        .WithMany("Matches")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("PubgStatsDiscordBot.Models.Participant", b =>
                {
                    b.HasOne("PubgStatsDiscordBot.Models.Roster")
                        .WithMany("Participants")
                        .HasForeignKey("RosterId");

                    b.HasOne("PubgStatsDiscordBot.Models.ParticipantsStats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsID");
                });

            modelBuilder.Entity("PubgStatsDiscordBot.Models.Player", b =>
                {
                    b.HasOne("PubgStatsDiscordBot.Models.Stats", "DuoStats")
                        .WithMany()
                        .HasForeignKey("DuoStatsID");

                    b.HasOne("PubgStatsDiscordBot.Models.Stats", "SoloStats")
                        .WithMany()
                        .HasForeignKey("SoloStatsID");

                    b.HasOne("PubgStatsDiscordBot.Models.Stats", "SquadStats")
                        .WithMany()
                        .HasForeignKey("SquadStatsID");
                });

            modelBuilder.Entity("PubgStatsDiscordBot.Models.Roster", b =>
                {
                    b.HasOne("PubgStatsDiscordBot.Models.Match")
                        .WithMany("Rosters")
                        .HasForeignKey("MatchId");
                });
#pragma warning restore 612, 618
        }
    }
}
